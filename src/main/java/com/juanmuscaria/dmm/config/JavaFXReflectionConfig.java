package com.juanmuscaria.dmm.config;

import io.micronaut.core.annotation.ReflectionConfig;

import static io.micronaut.core.annotation.TypeHint.AccessType.*;

@ReflectionConfig(type = org.fusesource.jansi.AnsiConsole.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.geometry.Insets.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.Button.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.ComboBox.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.Label.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.Tooltip.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.layout.BorderPane.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.layout.HBox.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.layout.VBox.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.text.Font.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.Tab.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.TabPane.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.TextArea.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.layout.AnchorPane.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.text.Text.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.shape.Shape.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.shape.SVGPath.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.shape.Rectangle.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.shape.PathElement.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.shape.Path.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.shape.MoveTo.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.shape.LineTo.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.layout.Region.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.layout.Priority.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.layout.Pane.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.image.Image.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.effect.Effect.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.Tooltip.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.PopupControl.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.Labeled.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.Label.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.Control.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.ContentDisplay.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.ComboBoxBase.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.ButtonBase.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.Parent.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.ParallelCamera.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.Node.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.Group.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.Camera.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.geometry.Pos.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.geometry.Insets.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.Tab.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.TabPane.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.TabPane.TabClosingPolicy.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.TextArea.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.control.TextInputControl.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
@ReflectionConfig(type = javafx.scene.layout.AnchorPane.class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
//@ReflectionConfig(type = .class, accessType = {ALL_PUBLIC, ALL_DECLARED_CONSTRUCTORS, ALL_DECLARED_FIELDS, ALL_DECLARED_METHODS})
public class JavaFXReflectionConfig {
}
