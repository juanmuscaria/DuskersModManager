import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'application'
    id 'org.jetbrains.gradle.upx' version '1.6.0-RC.5'
    id 'de.undercouch.download' version '5.4.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.micronaut.application' version '4.2.1'
}

version = "0.1"
group = "com.juanmuscaria"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("info.picocli:picocli-codegen")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("info.picocli:picocli")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("commons-io:commons-io:2.13.0")
    implementation("org.fusesource.jansi:jansi:2.4.1")
    implementation("io.github.mkpaz:atlantafx-base:2.0.1")
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("ch.qos.logback:logback-classic")
}

graalvmNative {
    toolchainDetection = true
    binaries.configureEach {
        resources.autodetect()
    }
}

application {
    mainClass.set("com.juanmuscaria.dmm.ModManagerCommand")
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.juanmuscaria.*")
    }
}

tasks.register("compileModloader", Exec) {
    setWorkingDir("$rootProject.projectDir/modloader")
    OperatingSystem os = DefaultNativePlatform.currentOperatingSystem
    if (os.isLinux()) {
        setCommandLine('/usr/bin/msbuild')
    } else {
        throw new UnsupportedOperationException("Unsuported OS")
    }
}

tasks.register("copyModloader", Copy) {
    dependsOn('compileModloader')
    from("$rootProject.projectDir/modloader/Doorstop/bin/Debug/net35/Doorstop.dll")
    into("$buildDir/modloader")
    rename('Doorstop.dll','modloader.dll')
}

tasks.register('downloadBepInExUnix', Download) {
    src "https://github.com/BepInEx/BepInEx/releases/download/v${project.property('BepInExVersion')}/BepInEx_unix_${project.property('BepInExVersion')}.0.zip"
    dest "$buildDir/BepInExUnix.zip"
    overwrite false
}

tasks.register('downloadBepInExWin', Download) {
    src "https://github.com/BepInEx/BepInEx/releases/download/v${project.property('BepInExVersion')}/BepInEx_x64_${project.property('BepInExVersion')}.0.zip"
    dest "$buildDir/BepInExWin.zip"
    overwrite false
}

tasks.register("repackBepInExWin", Zip) {
    dependsOn("downloadBepInExWin")
    from(zipTree("$buildDir/BepInExWin.zip")) {
        exclude("changelog.txt", "doorstop_config.ini")
    }
    from("$projectDir/src/main/repack")
    archiveFileName = "$buildDir/repack/win.zip"
}

tasks.register("repackBepInExUnix", Zip) {
    dependsOn("downloadBepInExUnix")
    from(zipTree("$buildDir/BepInExUnix.zip")) {
        exclude("changelog.txt", "run_bepinex.sh")
    }
    from("$projectDir/src/main/repack")
    archiveFileName = "$buildDir/repack/unix.zip"
}

tasks.register("repackBepInEx") {
    dependsOn("repackBepInExUnix", "repackBepInExWin")
}

processResources {
    dependsOn("repackBepInEx")
    from("$buildDir/repack")
}

run {
    //jvmArgs += "-agentlib:native-image-agent=config-merge-dir=src/main/resources/META-INF/native-image"
    jvmArgs += '-Djansi.mode=force'
    jvmArgs += '-Dpicocli.ansi=true'
}