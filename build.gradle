import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'application'
    //id 'org.jetbrains.gradle.upx' version '1.6.0-RC.5'
    id 'de.undercouch.download' version '5.4.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.micronaut.application' version '4.2.1'
}

ext.gitInfoCached = null
version = "0.0.1-${gitInfo('branch')}-${gitInfo('hash')}"
group = "com.juanmuscaria"
var os = DefaultNativePlatform.currentOperatingSystem

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("info.picocli:picocli-codegen")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    implementation("info.picocli:picocli")
    implementation("io.micronaut.picocli:micronaut-picocli")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("org.apache.commons:commons-lang3:3.12.0")
    implementation("commons-io:commons-io:2.13.0")
    implementation("org.fusesource.jansi:jansi:2.4.1")
    implementation("io.github.mkpaz:atlantafx-base:2.0.1")
    compileOnly("org.projectlombok:lombok")
    implementation("ch.qos.logback:logback-classic")
    implementation('org.apache.tika:tika-core:2.9.1')
    implementation('org.apache.commons:commons-collections4:4.4')
    implementation('com.fasterxml.jackson.core:jackson-databind:2.16.1')
    implementation('com.fasterxml.jackson.core:jackson-annotations:2.16.1')
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-toml:2.16.1')
}

graalvmNative {
    toolchainDetection = true
    binaries.configureEach {
        resources.autodetect()
    }
}

application {
    mainClass.set("com.juanmuscaria.dmm.ModManagerCommand")
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.juanmuscaria.*")
    }
}

tasks.register('downloadBepInExUnix', Download) {
    src "https://github.com/BepInEx/BepInEx/releases/download/v${project.property('BepInExVersion')}/BepInEx_unix_${project.property('BepInExVersion')}.0.zip"
    dest "$buildDir/BepInExUnix.zip"
    overwrite false
}

tasks.register('downloadBepInExWin', Download) {
    src "https://github.com/BepInEx/BepInEx/releases/download/v${project.property('BepInExVersion')}/BepInEx_x86_${project.property('BepInExVersion')}.0.zip"
    dest "$buildDir/BepInExWin.zip"
    overwrite false
}

tasks.register("repackBepInExWin", Zip) {
    dependsOn("downloadBepInExWin")
    from(zipTree("$buildDir/BepInExWin.zip")) {
        exclude("changelog.txt", "doorstop_config.ini")
    }
    from("$projectDir/src/main/repack")
    archiveFileName = "$buildDir/repack/win.zip"
}

tasks.register("repackBepInExUnix", Zip) {
    dependsOn("downloadBepInExUnix")
    from(zipTree("$buildDir/BepInExUnix.zip")) {
        exclude("changelog.txt", "run_bepinex.sh")
    }
    from("$projectDir/src/main/repack")
    archiveFileName = "$buildDir/repack/unix.zip"
}

tasks.register("repackBepInEx") {
    dependsOn("repackBepInExUnix", "repackBepInExWin")
}

tasks.register("installDotnetSdk", Exec) {
    group('dotnet')

    workingDir = "$projectDir/dotnet"
    if (os.isWindows()) {
        commandLine 'cmd', '/c', 'Powershell -File dotnet-install.ps1'
    } else {
        commandLine './dotnet-install.sh'
    }

    // dotnet-install.sh accepts the same arguments as the powershell version, but not the other way around...
    args += ['-InstallDir', 'sdk', '-NoPath', '-Channel', '6.0']
}

tasks.register("updateNuGetDependencies", Exec) {
    group('dotnet')
    dependsOn('installDotnetSdk')

    workingDir = "$projectDir/modloader"
    if (os.isWindows()) {
        commandLine 'cmd', '/c', file("$projectDir/dotnet/sdk/dotnet.exe").getAbsolutePath()
    } else {
        commandLine file("$projectDir/dotnet/sdk/dotnet").getAbsolutePath()
    }

    args += ['restore']
}

tasks.register("buildModloader", Exec) {
    group('dotnet')
    dependsOn('updateNuGetDependencies')

    workingDir = "$projectDir/modloader"
    if (os.isWindows()) {
        commandLine 'cmd', '/c', file("$projectDir/dotnet/sdk/dotnet.exe").getAbsolutePath()
    } else {
        commandLine file("$projectDir/dotnet/sdk/dotnet").getAbsolutePath()
    }

    args += ['msbuild']
}

processResources {
    dependsOn("repackBepInEx", "buildModloader")
    from("$buildDir/repack")
    from("$projectDir/modloader/bin/Debug/net35/modloader.dll")

    inputs.property "version", project.version
    from(sourceSets.main.resources.srcDirs) {
        include 'application.properties'

        expand 'version':project.version
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

run {
    //jvmArgs += "-agentlib:native-image-agent=config-merge-dir=../src/main/resources/META-INF/native-image"
    jvmArgs += '-Ddmm.forceLauncher=true'
    jvmArgs += '-Djansi.mode=force'
    jvmArgs += '-Dpicocli.ansi=true'
    workingDir = buildDir
}

def gitInfo(String key) {
    if (!gitInfoCached) {
        if (file('.git').exists()) {
            gitInfoCached = [
                    hash    : ['git', 'log', "--format=%h", '-n', '1'].execute().text.trim(),
                    fullHash: ['git', 'log', "--format=%H", '-n', '1'].execute().text.trim(),
                    branch  : ['git', 'symbolic-ref', '--short', 'HEAD'].execute().text.trim(),
                    message : ['git', 'log', "--format=%B", '-n', '1'].execute().text.trim()
            ]
        } else {
            gitInfoCached = [
                    hash    : 'NOT_A_GIT',
                    fullHash: 'NOT_A_GIT',
                    branch  : 'NOT_A_GIT',
                    message : 'NOT_A_GIT'
            ]
        }
    }
    return key ? gitInfoCached[key] : gitInfoCached
}